---
description: 
globs: 
alwaysApply: false
---
# Suna Project Architecture

## Complete File Structure
```
suna/
├── backend/                    # Python/FastAPI backend services
│   ├── api.py                 # Main FastAPI application entry
│   ├── .env.example           # Environment variables template
│   ├── requirements.txt       # Python dependencies
│   ├── pyproject.toml         # Poetry configuration
│   ├── Dockerfile             # Backend container config
│   ├── run_agent_background.py # Background agent runner
│   ├── agent/                 # Core agent system
│   │   ├── api.py             # Agent API endpoints
│   │   ├── run.py             # Agent execution logic
│   │   ├── prompt.py          # Agent prompting system
│   │   ├── agent_builder_prompt.py # Agent building prompts
│   │   ├── gemini_prompt.py   # Gemini-specific prompts
│   │   ├── tools/             # Agent tool implementations
│   │   │   ├── computer_use_tool.py    # Computer interaction
│   │   │   ├── data_providers_tool.py  # External data access
│   │   │   ├── message_tool.py         # Message handling
│   │   │   ├── sb_browser_tool.py      # Browser automation
│   │   │   ├── sb_files_tool.py        # File operations
│   │   │   ├── sb_shell_tool.py        # Shell commands
│   │   │   ├── web_search_tool.py      # Web search
│   │   │   ├── expand_msg_tool.py      # Message expansion
│   │   │   ├── mcp_tool_wrapper.py     # MCP tool wrapper
│   │   │   ├── fal_media_tool.py       # FAL media generation
│   │   │   └── data_providers/         # API integrations
│   │   │       ├── AmazonProvider.py   # Amazon services
│   │   │       ├── FirecrawlProvider.py # Web scraping
│   │   │       ├── LinkedinProvider.py # LinkedIn API
│   │   │       ├── TavilyProvider.py   # Search API
│   │   │       └── RapidAPIProvider.py # Multi-service API
│   │   └── sample_responses/  # Sample agent responses
│   ├── agentpress/            # Agent framework
│   │   ├── context_manager.py # Conversation context
│   │   ├── response_processor.py # LLM response handling
│   │   ├── thread_manager.py  # Thread lifecycle
│   │   ├── tool_registry.py   # Tool registration
│   │   └── utils/             # Utility functions
│   ├── mcp_local/             # Model Context Protocol
│   │   ├── api.py             # MCP API server
│   │   ├── client.py          # MCP client
│   │   └── tools/             # MCP tool integrations
│   ├── sandbox/               # Execution environment
│   │   ├── api.py             # Sandbox API server
│   │   ├── sandbox.py         # Container management
│   │   ├── tool_base.py       # Base tool class
│   │   └── docker/            # Docker configurations
│   ├── services/              # Business logic services
│   │   ├── billing.py         # Payment processing
│   │   ├── email.py           # Email notifications
│   │   ├── llm.py             # LLM integrations
│   │   ├── redis.py           # Caching service (with retry utilities)
│   │   ├── supabase.py        # Database service
│   │   ├── transcription.py   # Audio transcription
│   │   └── langfuse.py        # LLM observability
│   ├── supabase/              # Database configurations
│   │   └── migrations/        # Schema migrations
│   ├── utils/                 # Utilities and helpers
│   │   ├── retry.py           # Redis retry utilities
│   │   └── scripts/           # Maintenance scripts
│   ├── flags/                 # Feature flag system
│   └── tests/                 # Organized test directory
│       ├── README.md          # Test documentation
│       ├── check_projects.py  # Project validation tests
│       ├── test_fal_tool.py   # FAL media tool tests
│       └── test_image_generation.py # Image generation tests
├── frontend/                   # Next.js/React application
│   ├── src/
│   │   ├── app/               # Next.js App Router
│   │   │   ├── (dashboard)/   # Dashboard routes
│   │   │   │   ├── agents/    # Agent management
│   │   │   │   ├── dashboard/ # Main dashboard
│   │   │   │   ├── marketplace/ # Agent marketplace
│   │   │   │   └── projects/  # Project management
│   │   │   ├── (home)/        # Landing pages
│   │   │   ├── auth/          # Authentication
│   │   │   ├── share/         # Public sharing
│   │   │   └── api/           # API routes
│   │   ├── components/        # React components
│   │   │   ├── home/          # Landing page components
│   │   │   │   ├── sections/  # Page sections
│   │   │   │   │   ├── quriosity-showcase.tsx # Quriosity agents showcase
│   │   │   │   │   ├── hero-section.tsx      # Hero section
│   │   │   │   │   ├── footer-section.tsx    # Footer with Quriosity links
│   │   │   │   │   └── ...                   # Other sections
│   │   │   │   └── ui/        # Home-specific UI
│   │   │   ├── thread/        # Chat/conversation UI
│   │   │   ├── sidebar/       # Navigation
│   │   │   ├── billing/       # Payment components
│   │   │   ├── basejump/      # Team management
│   │   │   └── ui/            # Shared UI components
│   │   ├── hooks/             # Custom React hooks
│   │   │   └── react-query/   # React Query hooks
│   │   ├── lib/               # Utilities and configurations
│   │   │   ├── actions/       # Server actions
│   │   │   ├── supabase/      # Supabase client
│   │   │   └── utils/         # Helper functions
│   │   │       └── unicode.ts # Unicode filename normalization
│   │   ├── contexts/          # React contexts
│   │   └── providers/         # Context providers
│   └── public/                # Static assets
├── supabase/                   # Supabase project configuration
├── docs/                       # Project documentation
├── setup.py                    # Automated setup script
├── start.py                    # Development startup script
├── docker-compose.yaml         # Container orchestration
└── mise.toml                   # Development environment config
```

## Architecture Overview

Suna is an open-source AI agent platform built by Quriosity with a modern, scalable architecture consisting of four main components:

## Quriosity Branding Integration

- **Site Name**: "Quriosity" (updated from "Kortix Suna")
- **Product Name**: "Q" (updated from "Suna")
- **Repository Display**: "Quriosity/Q" in open source section
- **Footer Links**: Point to https://quriosity.com.au/ for most external links
- **Showcase Section**: New component featuring 6 Quriosity agent demonstrations
- **Logo System**: Three-logo system with Quriosity branding

### 1. Backend API (FastAPI)
- **Primary Technology**: Python with FastAPI framework
- **Core Responsibilities**: 
  - REST API endpoints ([api.py](mdc:backend/api.py))
  - Agent execution orchestration
  - LLM integration via LiteLLM
  - Authentication and authorization
- **Key Directories**:
  - [backend/agent/](mdc:backend/agent) - Core agent logic and tools
  - [backend/services/](mdc:backend/services) - Business logic layer
  - [backend/agentpress/](mdc:backend/agentpress) - Agent framework

### 2. Frontend Application (Next.js)
- **Primary Technology**: Next.js 14+ with App Router, React, TypeScript
- **Core Responsibilities**:
  - User interface and experience
  - Real-time chat interface
  - Dashboard and agent management
  - Authentication flows
- **Key Directories**:
  - [frontend/src/app/](mdc:frontend/src/app) - App Router pages and layouts
  - [frontend/src/components/](mdc:frontend/src/components) - React components
  - [frontend/src/hooks/](mdc:frontend/src/hooks) - Custom React hooks

### 3. Agent Execution Environment
- **Primary Technology**: Docker containers with sandbox isolation
- **Core Responsibilities**:
  - Secure agent tool execution
  - Browser automation via Playwright
  - File system operations
  - Shell command execution
- **Key Files**:
  - [backend/sandbox/](mdc:backend/sandbox) - Sandbox management
  - [backend/agent/tools/](mdc:backend/agent/tools) - Tool implementations

### 4. Database & Storage (Supabase)
- **Primary Technology**: PostgreSQL with Supabase
- **Core Responsibilities**:
  - User authentication and authorization
  - Conversation and thread persistence
  - File storage and management
  - Real-time subscriptions
- **Key Directories**:
  - [backend/supabase/migrations/](mdc:backend/supabase/migrations) - Schema changes
  - [supabase/](mdc:supabase) - Project configuration

## Data Flow Architecture

1. **User Interaction** → Frontend (Next.js)
2. **API Requests** → Backend API (FastAPI) 
3. **Agent Execution** → Sandbox Environment (Docker)
4. **Tool Calls** → Various integrations (Browser, APIs, Files)
5. **Data Persistence** → Supabase (PostgreSQL)
6. **Real-time Updates** → Frontend via Supabase subscriptions

## Agent Framework (AgentPress)

- **Context Manager**: [agentpress/context_manager.py](mdc:backend/agentpress/context_manager.py)
- **Response Processor**: [agentpress/response_processor.py](mdc:backend/agentpress/response_processor.py)
- **Thread Manager**: [agentpress/thread_manager.py](mdc:backend/agentpress/thread_manager.py)
- **Tool Registry**: [agentpress/tool_registry.py](mdc:backend/agentpress/tool_registry.py)

## Model Context Protocol (MCP)

- **Local Integration**: [backend/mcp_local/](mdc:backend/mcp_local)
- **API Server**: [mcp_local/api.py](mdc:backend/mcp_local/api.py)
- **Client Implementation**: [mcp_local/client.py](mdc:backend/mcp_local/client.py)

## Security Model

- **Agent Isolation**: Each agent runs in isolated Docker containers
- **Authentication**: Supabase Auth with JWT tokens
- **Authorization**: Row Level Security (RLS) policies
- **API Security**: Rate limiting and input validation
- **Secret Management**: Environment-based configuration
- **Network Security**: Controlled container networking

## Recent Infrastructure Improvements

### Redis Reliability Enhancements
- **Retry Utilities**: New `backend/utils/retry.py` with exponential backoff
- **Connection Resilience**: Automatic retry for transient Redis connection failures
- **Configuration**: Configurable retry attempts and delays
- **Integration**: Used throughout backend services for improved reliability

### Unicode File Handling
- **Cross-Platform Support**: `frontend/src/lib/utils/unicode.ts` for filename normalization
- **Unicode Standards**: Handles macOS NFD ↔ Windows/Linux NFC differences
- **File Upload Safety**: Prevents filename corruption across different systems
- **Integration**: Used in upload handlers, file viewers, and dashboard components

### MCP Server Improvements
- **Enhanced Configuration**: Improved MCP server browsing and setup interface
- **Better Error Handling**: More robust connection management and error reporting
- **Component Cleanup**: Removed deprecated MCP configuration components
- **Tool Integration**: Enhanced MCP tool wrapper functionality

### Testing Infrastructure
- **Organized Test Directory**: New `backend/tests/` structure with documentation
- **Comprehensive Coverage**: FAL tool tests, image generation tests, project validation
- **Test Documentation**: Detailed README with usage instructions and examples
- **CI/CD Ready**: Structured for automated testing in deployment pipelines

### Feature Flag System
- **Redis-Based Flags**: Centralized feature flag management with Redis storage
- **CLI Management**: Command-line tools for enabling/disabling features
- **Frontend Integration**: React hooks for feature flag checking
- **Backend Integration**: API endpoint guards based on feature flags

## Recent UI/UX Improvements

### Homepage Design Updates
- **Removed FlickeringGrid vertical lines** - Replaced with clean gradients
- **Eliminated horizontal borders** between sections for seamless flow
- **Unified backgrounds** - Full-width coverage instead of segmented grids
- **Subtle color palette** - Uses `bg-secondary/10` instead of bright colors
- **Consistent agent cards** - No special borders or scaling effects
- **Dark mode optimization** - Proper text contrast and theme support

### Quriosity Showcase Section
- 6 agent demonstration cards (Game, Design, Brand, Web, Art, Clone)
- Color-coded cards with interactive hover effects
- Positioned between Hero and Use Cases sections
- Located in `components/home/sections/quriosity-showcase.tsx`

## External Integrations

- **LLM Providers**: Anthropic, OpenAI, Groq (via LiteLLM)
- **Search Services**: Tavily, web search APIs
- **Web Scraping**: Firecrawl, custom scrapers
- **Cloud Storage**: Supabase Storage
- **Email Services**: Email API integration
- **Payment Processing**: Stripe integration via billing service
- **Monitoring**: Sentry error tracking, Langfuse LLM observability
- **Media Generation**: FAL.ai integration for image/video generation (enabled by default)
