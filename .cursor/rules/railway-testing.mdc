---
description:
globs:
alwaysApply: false
---
# Railway Testing - Overview

## Testing Documentation Structure

The Railway testing documentation has been split into focused files for better maintainability:

### Core Testing
- **ðŸ“‹ [railway-testing-core.mdc](railway-testing-core.mdc)** - Essential testing workflows, API testing, frontend validation, and CLI commands

### Specialized Testing (Coming Soon)
- **ðŸ¤– railway-testing-automation.mdc** - Automated testing scripts, CI/CD integration
- **âš¡ railway-testing-advanced.mdc** - Performance testing, load testing, integration testing

## Quick Start

For most testing needs, start with **railway-testing-core.mdc** which covers:
- Branch-based testing workflows
- API endpoint testing
- Frontend testing checklists
- Railway CLI commands
- Recent updates testing (new test files, browser tools, Tolt referrals)
- Troubleshooting common issues

## Recent Updates Covered

### New Test Files Integration
All new backend test files are documented with testing commands:
- `test_validate_base64_image.py` - Base64 image validation tests
- `test_token_compression.py` - Token compression tests  
- `test_custom_mcp.py` - Custom MCP server tests
- `test_mcp_use.py` - MCP usage tests

### Enhanced Features Testing
- Browser tool screenshot improvements
- Tolt referral tracking validation
- MCP server integration testing
- Improved error handling verification

## Usage

```bash
# Follow core testing workflow
1. Create feature branch
2. Test locally (optional): docker compose up
3. Push to Railway for deployment testing
4. Run test suite: poetry run pytest backend/tests/
5. Validate frontend functionality
6. Monitor Railway logs for issues
```

For detailed testing procedures, see **railway-testing-core.mdc**.
