---
description: 
globs: 
alwaysApply: false
---
# Backend Conventions & Patterns

## FastAPI Application Structure

### Main Application Setup (api.py)
```python
from fastapi import FastAPI, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager

@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    await initialize_services()
    yield
    # Shutdown
    await cleanup_services()

app = FastAPI(
    title="Suna API",
    description="AI Agent Platform API", 
    version="1.0.0",
    lifespan=lifespan
)

# Middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=get_cors_origins(),  # Dynamic CORS configuration
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

def get_cors_origins():
    """Get CORS origins with cloud deployment support"""
    origins = [
        "http://localhost:3000",  # Local development
        "http://localhost:3001",  # Alternative local port
    ]
    
    # Add frontend URL from environment
    frontend_url = os.getenv("FRONTEND_URL")
    if frontend_url:
        origins.append(frontend_url)
    
    # Add Railway wildcard support for cloud deployment
    origins.append(r"https://.*\.up\.railway\.app")
    
    return origins

# Include routers
app.include_router(agent_router, prefix="/api/agents", tags=["agents"])
```

### API Router Pattern
```python
from fastapi import APIRouter, Depends, HTTPException, status
from pydantic import BaseModel
from services.auth import get_current_user

router = APIRouter()

class AgentCreateRequest(BaseModel):
    name: str
    description: str
    system_prompt: str
    tools: List[str] = []

class AgentResponse(BaseModel):
    id: str
    name: str
    created_at: datetime

@router.post("/", response_model=AgentResponse)
async def create_agent(
    agent_data: AgentCreateRequest,
    current_user = Depends(get_current_user),
    agent_service = Depends(get_agent_service)
):
    try:
        agent = await agent_service.create_agent(
            user_id=current_user.id,
            **agent_data.dict()
        )
        return AgentResponse(**agent)
    except ValueError as e:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=str(e)
        )
```

## Environment Configuration

### Dual Configuration Support
Support both local development and cloud deployment with automatic fallback:

```python
import os
from typing import Optional

def get_redis_connection():
    """Get Redis connection with cloud/local fallback"""
    # Try cloud URL first
    redis_url = os.getenv('REDIS_URL')
    if redis_url:
        return redis.from_url(redis_url)
    
    # Fallback to individual variables
    return redis.Redis(
        host=os.getenv('REDIS_HOST', 'localhost'),
        port=int(os.getenv('REDIS_PORT', 6379)),
        db=int(os.getenv('REDIS_DB', 0)),
        password=os.getenv('REDIS_PASSWORD')
    )

def get_rabbitmq_connection():
    """Get RabbitMQ connection with cloud/local fallback"""
    import pika
    
    # Try cloud URL first
    rabbitmq_url = os.getenv('RABBITMQ_URL')
    if rabbitmq_url:
        return pika.BlockingConnection(pika.URLParameters(rabbitmq_url))
    
    # Fallback to individual variables
    credentials = pika.PlainCredentials(
        os.getenv('RABBITMQ_USER', 'guest'),
        os.getenv('RABBITMQ_PASS', 'guest')
    )
    
    parameters = pika.ConnectionParameters(
        host=os.getenv('RABBITMQ_HOST', 'localhost'),
        port=int(os.getenv('RABBITMQ_PORT', 5672)),
        virtual_host=os.getenv('RABBITMQ_VHOST', '/'),
        credentials=credentials
    )
    
    return pika.BlockingConnection(parameters)
```

### Environment Variable Priority
1. **Cloud URLs** (highest): `REDIS_URL`, `RABBITMQ_URL`
2. **Individual variables** (fallback): `REDIS_HOST`, `RABBITMQ_HOST`, etc.
3. **Defaults** (lowest): localhost, standard ports

## Service Layer Architecture

### Base Service Pattern
```python
from abc import ABC, abstractmethod
from supabase import Client

class BaseService(ABC):
    def __init__(self, supabase_client: Client):
        self.supabase = supabase_client
    
    async def _execute_query(self, query_builder):
        try:
            result = query_builder.execute()
            return result.data
        except Exception as e:
            logger.error(f"Database query failed: {e}")
            raise
```

### Service Implementation
```python
from typing import List, Optional
from .base import BaseService

class AgentService(BaseService):
    async def create_agent(
        self, 
        user_id: str, 
        name: str, 
        description: str,
        system_prompt: str,
        tools: List[str] = []
    ):
        agent_data = {
            'user_id': user_id,
            'name': name,
            'description': description,
            'system_prompt': system_prompt,
            'tools': tools
        }
        
        result = await self._execute_query(
            self.supabase.table('agents').insert(agent_data)
        )
        return result[0] if result else None
    
    async def get_user_agents(self, user_id: str):
        return await self._execute_query(
            self.supabase.table('agents')
            .select('*')
            .eq('user_id', user_id)
            .order('created_at', desc=True)
        )
```

## Agent System

### Tool Implementation Pattern
```python
# agent/tools/base_tool.py
from abc import ABC, abstractmethod
from typing import Dict, Any

class BaseTool(ABC):
    def __init__(self, name: str, description: str):
        self.name = name
        self.description = description
    
    @abstractmethod
    async def execute(self, **kwargs) -> Dict[str, Any]:
        pass
    
    def get_schema(self) -> Dict[str, Any]:
        return {
            "name": self.name,
            "description": self.description,
            "parameters": self._get_parameters_schema()
        }
```

### Web Search Tool Example
```python
# agent/tools/web_search_tool.py
from .base_tool import BaseTool
from services.search import TavilySearchService

class WebSearchTool(BaseTool):
    def __init__(self):
        super().__init__(
            name="web_search",
            description="Search the web for current information"
        )
        self.search_service = TavilySearchService()
    
    async def execute(self, query: str, max_results: int = 5) -> Dict[str, Any]:
        try:
            results = await self.search_service.search(
                query=query,
                max_results=max_results
            )
            return {
                "success": True,
                "results": results,
                "query": query
            }
        except Exception as e:
            return {
                "success": False,
                "error": str(e),
                "query": query
            }
```

## Agent Execution

### Agent Runner Pattern
```python
# agent/run.py
from typing import List, Dict, Any
from .tools import get_tool_registry
from services.llm import LLMService

class AgentRunner:
    def __init__(self, agent_config: Dict[str, Any]):
        self.agent_id = agent_config['id']
        self.system_prompt = agent_config['system_prompt']
        self.tools = get_tool_registry(agent_config['tools'])
        self.llm_service = LLMService()
    
    async def run(self, message: str, context: Dict[str, Any] = None):
        try:
            # Prepare context and tools
            available_tools = [tool.get_schema() for tool in self.tools.values()]
            
            # Generate response
            response = await self.llm_service.generate_response(
                system_prompt=self.system_prompt,
                message=message,
                tools=available_tools,
                context=context
            )
            
            # Execute tool calls if needed
            if response.get('tool_calls'):
                for tool_call in response['tool_calls']:
                    tool_result = await self._execute_tool(tool_call)
                    response['tool_results'].append(tool_result)
            
            return response
        except Exception as e:
            logger.error(f"Agent execution failed: {e}")
            raise
```

## Sandbox Environment

### Docker Container Management
```python
# sandbox/sandbox.py
import docker
from typing import Dict, Any

class SandboxManager:
    def __init__(self):
        self.client = docker.from_env()
    
    async def create_sandbox(self, image: str = "python:3.11-slim"):
        container = self.client.containers.run(
            image,
            detach=True,
            network_mode="bridge",
            mem_limit="512m",
            cpu_quota=50000,  # 50% of one CPU
            remove=True
        )
        return container.id
    
    async def execute_command(self, container_id: str, command: str):
        container = self.client.containers.get(container_id)
        result = container.exec_run(command, capture_output=True, text=True)
        return {
            "exit_code": result.exit_code,
            "stdout": result.output,
            "stderr": result.output if result.exit_code != 0 else ""
        }
```

## Environment Configuration

### Settings Pattern
```python
# config/settings.py
from pydantic_settings import BaseSettings
from typing import Optional

class Settings(BaseSettings):
    # Database
    supabase_url: str
    supabase_anon_key: str
    supabase_service_role_key: str
    
    # LLM Providers
    anthropic_api_key: Optional[str] = None
    openai_api_key: Optional[str] = None
    
    # External Services
    tavily_api_key: Optional[str] = None
    firecrawl_api_key: Optional[str] = None
    
    # App Settings
    debug: bool = False
    environment: str = "development"
    
    class Config:
        env_file = ".env"

settings = Settings()
```

## Key Directories

### Backend Structure
```
backend/
â”œâ”€â”€ api.py                    # Main FastAPI application
â”œâ”€â”€ agent/                    # Agent system components
â”‚   â”œâ”€â”€ api.py               # Agent API endpoints
â”‚   â”œâ”€â”€ run.py               # Agent execution logic
â”‚   â”œâ”€â”€ prompt.py            # System prompts
â”‚   â””â”€â”€ tools/               # Tool implementations
â”œâ”€â”€ services/                # Business logic services
â”‚   â”œâ”€â”€ llm.py              # LLM integrations
â”‚   â”œâ”€â”€ supabase.py         # Database service
â”‚   â””â”€â”€ auth.py             # Authentication
â”œâ”€â”€ sandbox/                 # Execution environment
â”‚   â”œâ”€â”€ api.py              # Sandbox API server
â”‚   â””â”€â”€ sandbox.py          # Container management
â”œâ”€â”€ mcp_local/              # Model Context Protocol
â””â”€â”€ utils/                  # Utilities and helpers
```

## Error Handling

### Exception Patterns
```python
# Custom exceptions
class AgentError(Exception):
    pass

class ToolExecutionError(AgentError):
    pass

# Error handling middleware
@app.exception_handler(AgentError)
async def agent_error_handler(request: Request, exc: AgentError):
    return JSONResponse(
        status_code=400,
        content={"error": "Agent Error", "detail": str(exc)}
    )
```

## Development Commands

### Running Services
```bash
cd backend

# Main API server
poetry run python api.py

# Sandbox API server  
poetry run python sandbox/api.py

# MCP local server
poetry run python mcp_local/api.py

# Background agent processor
poetry run python run_agent_background.py
```

### Docker Commands (Modern Syntax)
```bash
# Use "docker compose" (space) not "docker-compose" (hyphen)
docker compose up backend
docker compose restart backend
docker compose logs backend
```
